@page "/courses"
@using TokenTestingBlazor.Client.Models
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@inject CookieStorageAccessor cookies
@inject CanvasCourseAccessor coursesAPI
@inject CourseSelector courseSelector

<PageTitle>Courses</PageTitle>

<TokenTestingBlazor.Client.Components.LoginHeader>

    <h3>All Courses</h3>

    @if (loading)
    {
        <p>Loading...</p>
    }
    else if (courseList is null)
    {
        <p>Nothing to display...</p>
    }
    else
    {
        <div class="container">
            <div class="row">
                <div class="col">
                    <p>Selected Course</p>
                    <p>@selectionName</p>
                </div>
            </div>

            <div>
                <h4>All Courses</h4>
            </div>
            @if (courseList is not null)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Course Name</th>
                            <th>Course Id</th>
                            <th>Workflow State</th>
                            <th>Total Students</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (CanvasCourseDTO course in courseList)
                        {
                            <tr @onclick="() => SetCourseSelection(course.id, course.name)">
                                <td>@course.name</td>
                                <td>@course.id</td>
                                <td>@course.workflow_state</td>
                                <td>@course.total_students</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

            <div>
                <h4>Students in Course</h4>
            </div>
            @if (studentList is not null)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Student Name</th>
                            <th>Student Id</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (CanvasStudentDTO student in studentList)
                        {
                            <tr>
                                <td>@student.name</td>
                                <td>@student.student_id</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    }

</TokenTestingBlazor.Client.Components.LoginHeader>

@code {
    private bool loading = false;
    private string? token;
    private List<CanvasCourseDTO>? courseList;
    private int? selectionId;
    private string? selectionName;

    private List<CanvasStudentDTO>? studentList;

    private void SetCourseSelection(int id, string name)
    {
        selectionId = id;
        selectionName = name;
        courseSelector.SetSelection(id, name);
    }

    private async Task FetchAllCourses()
    {
        token = await cookies.GetValueAsync<string>("canvas_access_token");

        if (token is null)
        {
            return;
        }
        else
        {
            try
            {
                courseList = await coursesAPI.FetchAllCourses(token);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
        }
    }

    private async Task FetchStudents(int id)
    {
        token = await cookies.GetValueAsync<string>("canvas_access_token");

        if (token is null)
        {
            return;
        }
        else
        {
            try
            {
                studentList = await coursesAPI.FetchStudentsInCourse(token, id);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        (selectionId, selectionName) = courseSelector.GetSelection();
        await FetchAllCourses();
        if (selectionId is not null)
        {
            await FetchStudents((int)selectionId);
        }
        loading = false;
    }
}
